// بابت فرمت نوشتاری در درس قبل عذرمیخوام . 
// از این درس به بعد فرمت نوشتاری زیبا تر خواهد بود . 


// در قسمت قبل گفتم که وقتی MaterialApp.router تعریف میشه دیگه پارامتر home نیازی نداره .و به طور خودکار اولین روتی که در GoRouter با / نوشته شده باشه رو به عنوان روت اصلی پروژه در نظر میگیره . 
// حالا اگه بخوایم همچین اتفاقی نیوفته ما میایم و در همین GoRouter با استفاده از پارامتر initialLocation روت اصلی پروژه رو تغییر میدیم . مثلا همون روتی که در درس قبلی تعریف کردیم به این صورت بود  HomeScreen.route
// یک متد استاتیک داخل صفحه مورد نظرمون . 


// برای جا به جایی بین route ها ما در این کتابخانه از دو حالت context.go و context.push استفاده میکنیم . 
// context.go مارو به صفحه مورد نظر میبره ولی با این تفاوت که دیگه صفحات قبلی در دسترس نیست که با دکمه back پایین گوشی یا داخل appbar بتونیم برگردیم عقب . 
// اما content.push قابلیت برگشت به عقب هم میده بهمون . 




// --------------------------------------- نحوه ارسال داده به سمت صفحه مورد نظر هنگام نویگت 
// برای ارسال داده ما از مقدار extra: در توابع context.go یا context.push استفاده میکنیم 
// برای مثال
context.push(HomeScreen.route,extra:'homescreen');

// روی دکمه تعریف میشه . 
// حالا چطوری میتونیم دریافت کنیم مقادیر ارسالی رو : 
// وارد صفحه ای میشیم که قراره داده بهش ارسال بشه 
// با استفاده از کد زیر مقدارش رو دریافت میکنیم 
String name = GoRouterState.of(context).extra! as String 
// به این صورت داده ای که با استفاده از پارامتر extra ارسال شده بود سمت ما رو گرفتیم ذخیره اش کردیم داخل یک متغیر و اینجا میتونیم استفاده کنیم ازش داخل HomeScreen
  // لزوما نباید تایپ ارسالی ما استرینگ باشه هر نوع تایپی مثل کلاس ها با مقادیر ورودیشون یا عدد یا ... رو میتونیم به عنوان ورودی به هر صفحه ای ارسال کنیم . 
  // فقط نیازه موقعی که داخل صفحه قراره دریافت کنیم تایپ کستینگ و نوع متغیر رو نوع داده ای که داریم ارسال میکنیم قرار بدیم . 3 خط بالا استرینگ تعریف کردیم . هر چیزی میتونه باشه . 







// -------------------------------------------------------------------------------------
  // یک نوع که بیش تر برای وب در فلاتر کاربرد داره sub route ها هستند . 
  // مثلا یک روت داریم به عنوان admin که صفحه ادمین رو برمیگردونه

GoRoute(
  path:'/admin',
  builder:(context,state){
    return AdminPanel();
  }
  // حالا نیاز داریم که صفحات دیگه ای هم داشته باشیم با این تفاوت که قبل همشون ادمین نوشته شده باشه . یک راهکارش اینه که بیایم و قبل هر روتی که تعریف میکنیم /admin هم بنویسیم . اما راهکار بهترش اینه که از ساب روت استفاده کنیم : 
  // مقدار زیر رو اضافه میکنیم به تابع GoRoute بالا برای مثال : 
  routes : [
    GoRoute(
      path:'post/show'
      builder:(context,state){
        return PostScreen();
      }
  ]


// حالا وقتی بخوایم استفاده کنیم به این صورت میچسبونیم به هم 
      context.go("/admin/post/show"

// روت post/show  میشه زیر مجموعه admin 
                 // دیگه قبل post نباید / قرار بگیره
                 // به این هم دقت کنید که روت ها باید به صورت استاتیک طوری که در درس قبل توضیح دادم قرار بگیره . 
                 

                 





  

  
